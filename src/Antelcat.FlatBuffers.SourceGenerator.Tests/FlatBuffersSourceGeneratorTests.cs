using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Xunit;
using Xunit.Abstractions;

namespace Antelcat.FlatBuffers.SourceGenerator.Tests;

public class FlatBuffersSourceGeneratorTests(ITestOutputHelper testOutputHelper)
{
    private const string VectorClassText = @"
namespace TestNamespace;

[Generators.Report]
public partial class Vector3
{
    public float X { get; set; }
    public float Y { get; set; }
    public float Z { get; set; }
}";

    private const string ExpectedGeneratedClassText = @"// <auto-generated/>

using System;
using System.Collections.Generic;

namespace TestNamespace;

partial class Vector3
{
    public IEnumerable<string> Report()
    {
        yield return $""X:{this.X}"";
        yield return $""Y:{this.Y}"";
        yield return $""Z:{this.Z}"";
    }
}
";

    public enum EE
    {
        [EnumMember(Value = "a")] A
    }

    [Fact]
    public void GenerateReportMethod()
    {
        // Create an instance of the source generator.
        var generator = new FlatBuffersSourceGenerator();

        // Source generators should be tested using 'GeneratorDriver'.
        var driver = CSharpGeneratorDriver.Create(generator);

        // We need to create a compilation with the required source code.
        var compilation = CSharpCompilation.Create(nameof(FlatBuffersSourceGenerator),
            [CSharpSyntaxTree.ParseText(VectorClassText)],
            [
                // To support 'System.Attribute' inheritance, add reference to 'System.Private.CoreLib'.
                MetadataReference.CreateFromFile(typeof(object).Assembly.Location)
            ]);

        // Run generators and retrieve all results.
        var runResult = driver.RunGenerators(compilation).GetRunResult();

        // All generated files can be found in 'RunResults.GeneratedTrees'.
        var generatedFileSyntax = runResult.GeneratedTrees.Single(t => t.FilePath.EndsWith("Vector3.g.cs"));

        // Complex generators should be tested using text comparison.
        Assert.Equal(ExpectedGeneratedClassText, generatedFileSyntax.GetText().ToString(),
            ignoreLineEndingDifferences: true);
    }

    [Fact]
    public void Tests()
    {
        var mark = 0;
        foreach (var s in ShorterThan(["123", "456", "789", "1011", "1213"], 7, (s, _) =>
            {
                var ret = mark is 0 ? s : ' ' + s;
                mark++;
                return ret;
            }))
        {
            mark = 0;
            testOutputHelper.WriteLine(s);
        }
    }

    private static IEnumerable<string> ShorterThan(IEnumerable<string> inputs, int max,
                                                   Func<string, int, string>? modify = null)
    {
        var sb = new StringBuilder();
        foreach (var (input, index) in inputs.Select(static (x, i) => (x, i)))
        {
            var next = modify?.Invoke(input, index) ?? input;
            if (next.Length + sb.Length > max)
            {
                yield return sb.ToString();
                sb = new StringBuilder(modify?.Invoke(input, index) ?? input);
            }
            else
            {
                sb = sb.Append(next);
            }
        }

        yield return sb.ToString();
    }
}